// *********************************–°—Ç—Ä—ñ–ª–æ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è (Arrow function)****************************************\\

// JSDoc - comment –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–æ–º—ñ—Å—Ç—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î —ñ–Ω—à–æ–º—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —à–≤–∏–¥—à–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —â–æ —Ä–æ–±–∏—Ç—å, –ø—Ä–∏–π–º–∞—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—è.
// –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JSDoc - comment –Ω–∞ —Ä—è–¥–∫—É –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—é—î –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ /**
// –î–∞–ª—ñ –æ–ø–∏—Å—É—î–º–æ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é.

// function declaration

/**
 * Buy product, log message with purchase info
 * @param {string} productName
 * @param {number} productQty
 * @param {number} price - price per one item
 * @returns {string}
 */
// function buyProduct(productName, productQty, price) {
//   console.log(
//     `You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${
//       productQty * price
//     }`
//   );

//   return "hello world";
// }

// buyProduct("apple", 10, 35);
// function expression

// const buyProduct = function(productName, productQty, price){
//     console.log(`You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${productQty * price}`);
// }
// buyProduct('apple', 10, 35)

// arrow function

// const buyProduct = (productName, productQty, price) => {
//   console.log(
//     `You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${
//       productQty * price
//     }`
//   );
// };
// buyProduct('apple', 10, 35)

// ***********–ù–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è******** \\

// –Ø–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
/**
 * Get product total price
 * @param {number} qty - quantity items
 * @param {number} price - price per item
 * @returns {number} - total price
 */
// const getTotalPrice = (qty, price) => {
//   return qty * price;
// };
// console.log(getTotalPrice(3, 150))

// –ù–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
// const getTotalPrice = (qty, price) => (qty * price).toString();

// console.log(getTotalPrice(3, 150))
// *****–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–µ –æ–≥–æ—Ä—Ç–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏ —è–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–¥–∏–Ω*****\\

// –û–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –∑ –¥—É–∂–∫–∞–º–∏
/**
 * Check user strong password üòÇ
 * @param {String} password
 * @returns {Boolean}
 */
// const checkPassword = (password) => password === "qwerty111";

// console.log(checkPassword('qwerty111'));

// –û–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –±–µ–∑

// const checkPassword = password => password === "qwerty111";

// console.log(checkPassword('qwerty111'));

// ***********–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤—É arguments******** \\

// function declaration

/**
 * Log items
 */
// function getProductList() {
//   //   console.log(Array.from(arguments));
//   console.log([...arguments]);
// //   for (const product of arguments) {
// //     console.log(product);
// //   }
// }

// getProductList("Apple", "Banana", "Orange", "Mango");
// getProductList("Apple", "Banana", "Orange", "Mango", "Watermelon");
// getProductList("Mango");
// arrow function

// const getProductList = (...args) => {
//   console.log(args);
// };

// getProductList("Apple", "Banana", "Orange", "Mango");
// getProductList("Apple", "Banana", "Orange", "Mango", "Watermelon");
// getProductList("Mango");

// *************Callback function*********************\\

// function add(a,b){
//     return a + b;
// }

// console.log(add(5, 5))// –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// console.log(add) // –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é

// *******Callback —Ñ—É–Ω–∫—Ü—ñ—è —É –≤–∏–≥–ª—è–¥—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó*****\\
// function logResult(a, b, callback) {
//     console.log(callback);
//     const result = callback(a, b);
//     console.log(`Result is ${result}`);
// }

// logResult(4, 5, add)
// logResult(4, 5, sum)

// function add(a, b) {
//     return a + b
// }

// function sum(a, b) {
//     return a * b;
// }

// ******************–Ü–Ω–ª–∞–π–Ω–æ–≤–∞ Callback —Ñ—É–Ω–∫—Ü—ñ—è******************\\
// function logResult(a, b, callback) {
//     console.log(callback);
//     const result = callback(a, b);
//     console.log(`Result is ${result}`);
// }

// logResult(4, 5, (a, b) => a + b)
// logResult(4,5, function(a,b) {
//     return a / b
// })
// logResult(4, 5, (a, b) => a * b)

// ************************************** forEach *********************************************\\
// const products = ["Apple", "Banana", "Orange", "Mango", "Watermelon"];

// –¶–∏–∫–ª for
// for (let i = 0; i < products.length; i += 1) {
//     const product = products[i];

//     console.log(`${i + 1} - ${product}`);
// }

// forEach

// function logProduct(product, idx, arr){
//     console.log('product', product)
//     console.log('idx', idx),
//     console.log('arr', arr)
// }

// products.forEach(logProduct)

// const result = products.forEach((product, idx, arr)=> {
//     // console.log('product', product);
//     return 'Hello world';
//     // console.log('idx', idx),
//     // console.log('arr', arr)
// })

// console.log(result)

// function customForEach(callback) {
//   for (let i = 0; i < this.length; i += 1) {
//     callback(this[i], i, this);
//   }
// }

// Array.prototype.customForEach = customForEach;

// products.customForEach((product, idx, arr) => {
//   console.log("product", product);
//   console.log("idx", idx), console.log("arr", arr);
// });

// ********** –ü—Ä–∞–∫—Ç–∏–∫–∞ ***************************\\

// Task - 1
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
//   const product = {
//     id: Date.now(),
//     ...obj
//   };

//   callback(product)
// }

// function logProduct(product) {
//   console.log("Product", product);
// }

// function logTotalPrice({ price, quantity }) {
//   console.log(`Product total price ${price * quantity}`);
// }

// createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
// createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);

// Task - 2
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
// 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
//
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// function each(arr, action) {
//   const items = [];

//   arr.forEach((elem) => {
//     const result = action(elem);
//     items.push(result);
//   });

//   return items;
// }

// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));
// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)));

// Task-3
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó successCallback —Ç–∞ errorCallback.
// –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback.
// –£ –≤–∏–ø–∞–¥–∫—É —è–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

// const products = [
//   {
//     id: 1,
//     name: "–¢–µ–ª–µ—Ñ–æ–Ω",
//     price: 10000,
//     description: "–°–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –¥–∏—Å–ø–ª–µ—î–º —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ—Ä–æ–º.",
//   },
//   {
//     id: 2,
//     name: "–ù–æ—É—Ç–±—É–∫",
//     price: 25000,
//     description: "–õ–µ–≥–∫–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥.",
//   },
//   {
//     id: 3,
//     name: "–ü–ª–∞–Ω—à–µ—Ç",
//     price: 8000,
//     description: "–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
//   },
// ];

// function getProductDetails(id, success, error) {
//   for (const product of products) {
//     if (product.id === id) {
//       return success(product);
//     }
//   }

//   error(id)
// }

// getProductDetails(3, handleSuccess, handleError);
// getProductDetails(44, handleSuccess, handleError);

// function handleSuccess(message) {
//   console.log(`‚úÖ Success!`, message);
// }

// function handleError(productId) {
//   console.log(`‚ùå Error! Product with ${productId} id not found`);
// }

// Task-4
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calculateAveragePrice, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –Ω–∞ –≤—Ö—ñ–¥ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —Ç–æ–≤–∞—Ä–∏, —Ç–∞ –∫–æ–ª–±–µ–∫–∏ onSuccess —Ç–∞ onError.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –æ–±—á–∏—Å–ª—é–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞—Å–∏–≤—ñ —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ onSuccess, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –æ—Ç—Ä–∏–º–∞–Ω—É —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
// –Ø–∫—â–æ –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ onError, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Ä—è–¥–æ–∫ "No products found".
// –î–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ toFixed(2), —â–æ–± –æ–±–º–µ–∂–∏—Ç–∏ —á–∏—Å–ª–æ –¥–æ –¥–≤–æ—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤.

// 6 –∑–Ω–∞—á–µ–Ω—å —è–∫—ñ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—å false

// 1 false
// 2 "" - –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
// 3 0  - —á–∏—Å–ª–æ –Ω—É–ª—å
// 4 null
// 5 undefined
// 6 NaN

// const products = [
//   { name: "Apple", price: 0.99 },
//   { name: "Banana", price: 0.49 },
//   { name: "Orange", price: 0.79 },
//   { name: "Mango", price: 1.99 },
// ];

// function calculateAveragePrice(products, onSuccess, onError) {
//   if (!products.length) {
//     // products.length === 0
//     onError("No products found");
//     return;
//   }

//   let total = 0;

//   products.forEach(({ price }) => (total += price));

//   const averagePrice = total / products.length;
//   onSuccess(averagePrice);
// }

// const onSuccess = (averagePrice) =>
//   console.log("Average price: ", averagePrice.toFixed(2));

// const onError = (errorMessage) => console.log("Error ‚ùå", errorMessage);

// calculateAveragePrice(products, onSuccess, onError);

// const arr = [1, 2, 3, [4, 5, [7, 8, [9, 10]]]];

// function getTotal(numbers) {
//   let total = 0;

//   for (const number of numbers) {
//     if (Array.isArray(number)) {
//       total += getTotal(number);
//     } else {
//       total += number;
//     }
//   }

//   return total;
// }

// console.log(getTotal(arr));

const arr = [1, 4, 2, 3];

// console.log(arr.sort((a, b) => a - b));
// console.log('Original array', arr)

console.log(arr.toSorted((a, b) => a - b));
console.log("Original array", arr);

const sortByDescendingFriendCount = (users) => {
  return users.sort((a, b) => b.friends.length - a.friends.length);
};
